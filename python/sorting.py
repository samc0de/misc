# -*- coding: utf-8 -*-
"""sorting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_wSw-e-pocCFtOOgMWAZWxCxUSqN4J_
"""

import numpy as np
arr = np.random.randint(0, 999, size=500)
from copy import copy, deepcopy

def copy_inputs(func):
  def wrapper(*args, **kwargs):
    args_copy = map(deepcopy, args) 
    kwargs_copy = {k: deepcopy(v) for k, v in kwargs.items()}
    return func(*args_copy, **kwargs_copy)
  return wrapper


def test(sort_func, arr=None):
  if arr is None:
    arr = np.random.randint(0, 999, size=500)
  return all(sort_func(arr) == sorted(arr))

# Bubble sort.
@copy_inputs
def bubble_sort(arr):
  for i in range(len(arr) - 1, 0, -1):
    for index, num in enumerate(arr[:i + 1]):
      while index < i and num > arr[index + 1]:
        arr[index], arr[index + 1] = arr[index + 1], arr[index]
  return arr

# %timeit op = bubble_sort(np.random.randint(0, 999, size=500))

test(bubble_sort)

@copy_inputs
def selection_sort(arr):
  arr_len = len(arr)
  for sorted_index in range(arr_len - 1, 0, -1):
    arr_max, max_idx = arr[0], 0
    for i, num in enumerate(arr[:sorted_index + 1]):
      if num > arr_max:
        arr_max, max_idx = num, i
    arr[sorted_index], arr[max_idx] = arr[max_idx], arr[sorted_index]
  return arr

test(selection_sort)

# %timeit op = selection_sort(np.random.randint(0, 999, size=500))

# %timeit op = sorted(np.random.randint(0, 999999, size=500000))

